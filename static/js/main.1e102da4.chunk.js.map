{"version":3,"sources":["components/UserSelector.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","utils/fetchClient.ts","api/api.ts","App.tsx","index.tsx"],"names":["UserSelector","users","handleUserSelect","useState","isDropDownOpened","setIsDropDownOpened","className","type","onClick","id","role","map","user","href","event","name","PostsList","userPosts","handleSelectPost","selectedPost","post","title","cn","Loader","NewCommentForm","selectedPostId","handleAddNewComment","setName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","commentText","setCommentText","isCommentTextError","setIsCommentTextError","isLoading","setIsLoading","handleSubmit","a","preventDefault","trim","length","Error","onSubmit","htmlFor","placeholder","value","onChange","e","target","PostDetails","comments","isCommentError","canWriteComment","setCanWriteComment","handleDeleteComment","body","comment","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","addComment","postId","App","setUsers","setUserPosts","selectedUser","setSelectedUser","setSelectedPost","setComments","isError","setIsError","setIsCommentError","useEffect","getUserPostsFromServer","userId","getUserPosts","catch","finally","getCommentsFromServer","getComments","newComment","filteredComments","filter","currentPost","commentId","deleteComment","ReactDOM","render","document","getElementById"],"mappings":"0RAWaA,EAAgC,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBACrD,EAAgDC,oBAAS,GAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KAEA,OACE,sBAAK,UAAQ,eAAeC,UAAU,qBAAtC,UACE,qBAAKA,UAAU,mBAAf,SACE,yBACEC,KAAK,SACLD,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdE,QAAS,kBAAMH,GAAqBD,IALtC,UAOE,iDAEA,sBAAME,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDF,GACC,qBAAKE,UAAU,gBAAgBG,GAAG,gBAAgBC,KAAK,OAAvD,SACE,qBAAKJ,UAAU,mBAAf,SACGL,EAAMU,KAAI,SAACC,GAAD,OACT,mBAEEC,KAAI,gBAAWD,EAAKH,IACpBH,UAAU,gBACVE,QAAS,SAACM,GACRZ,EAAiBY,EAAOF,GACxBP,GAAoB,IANxB,SASGO,EAAKG,MARDH,EAAKH,eC1BbO,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,UACAC,EAFwC,EAExCA,iBACAC,EAHwC,EAGxCA,aAHwC,OAKxC,sBAAK,UAAQ,YAAb,UACE,mBAAGb,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGW,EAAUN,KAAI,SAACS,GAAD,OACb,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKX,KAE3B,oBAAI,UAAQ,YAAZ,SAAyBW,EAAKC,QAE9B,oBAAIf,UAAU,8BAAd,SACE,wBACEC,KAAK,SACL,UAAQ,aACRD,UAAWgB,IAAG,SAAU,UAAW,CACjC,YAAwB,OAAZH,QAAY,IAAZA,OAAA,EAAAA,EAAcV,MAAOW,EAAKX,KAExCD,QAAS,kBAAMU,EAAiBE,IANlC,UAQe,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcV,MAAOW,EAAKX,GAAK,QAAU,aAdxBW,EAAKX,gBC5B1Bc,G,MAAS,kBACpB,qBAAKjB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSNkB,EAAkC,SAAC,GAGzC,IAFLC,EAEI,EAFJA,eACAC,EACI,EADJA,oBAEA,EAAwBvB,mBAAS,IAAjC,mBAAOY,EAAP,KAAaY,EAAb,KACA,EAAsCxB,oBAAS,GAA/C,mBAAOyB,EAAP,KAAoBC,EAApB,KACA,EAA0B1B,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcC,EAAd,KACA,EAAwC5B,oBAAS,GAAjD,mBAAO6B,EAAP,KAAqBC,EAArB,KACA,EAAsC9B,mBAAS,IAA/C,mBAAO+B,EAAP,KAAoBC,EAApB,KACA,EAAoDhC,oBAAS,GAA7D,mBAAOiC,EAAP,KAA2BC,EAA3B,KAEA,EAAkClC,oBAAS,GAA3C,mBAAOmC,EAAP,KAAkBC,EAAlB,KAWMC,EAAY,uCAAG,WAAO1B,GAAP,SAAA2B,EAAA,yDACnB3B,EAAM4B,iBAED3B,EAAK4B,OAAOC,OAGff,GAAe,GAFfA,GAAe,GAKZC,EAAMa,OAAOC,OAGhBX,GAAgB,GAFhBA,GAAgB,GAKbC,EAAYU,OAGfP,GAAsB,GAFtBA,GAAsB,KAKpBtB,EAAK4B,OAAOC,QACXd,EAAMa,OAAOC,QACbV,EAAYS,OAAOC,QAvBL,iCA0BfL,GAAa,GA1BE,SA4BTb,EAAoBD,EAAgBV,EAAMe,EAAOI,GA5BxC,OA6BfC,EAAe,IA7BA,wDA+BT,IAAIU,MA/BK,yBAiCfN,GAAa,GAjCE,6EAAH,sDAsClB,OACE,uBAAM,UAAQ,iBAAiBO,SAAUN,EAAzC,UACE,sBAAKlC,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQyC,QAAQ,sBAAjC,yBAIA,sBAAKzC,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLQ,KAAK,OACLN,GAAG,sBACHuC,YAAY,eACZ1C,UAAWgB,IAAG,QAAS,CACrB,YAAaM,IAEfqB,MAAOlC,EACPmC,SAAU,SAACC,GAAD,OAAOxB,EAAQwB,EAAEC,OAAOH,UAGpC,sBAAM3C,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdsB,GACC,sBACEtB,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBsB,GACC,mBAAGtB,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQyC,QAAQ,uBAAjC,0BAIA,sBAAKzC,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLQ,KAAK,QACLN,GAAG,uBACHuC,YAAY,iBACZ1C,UAAWgB,IAAG,QAAS,CACrB,YAAaU,IAEfiB,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAAOpB,EAASoB,EAAEC,OAAOH,UAGrC,sBAAM3C,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGd0B,GACC,sBACE1B,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlB0B,GACC,mBAAG1B,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQyC,QAAQ,eAAjC,0BAIA,qBAAKzC,UAAU,UAAf,SACE,0BACEG,GAAG,eACHM,KAAK,OACLiC,YAAY,oBACZ1C,UAAWgB,IAAG,WAAY,CACxB,YAAac,IAEfa,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAAegB,EAAEC,OAAOH,YAI5Cb,GACC,mBAAG9B,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEC,KAAK,SACLD,UAAWgB,IAAG,SAAU,UAAW,CACjC,aAAcgB,IAHlB,mBAUF,qBAAKhC,UAAU,UAAf,SAEE,wBACEC,KAAK,QACLD,UAAU,0BACVE,QAzKU,WAClBmB,EAAQ,IACRE,GAAe,GACfE,EAAS,IACTE,GAAgB,GAChBE,EAAe,IACfE,GAAsB,IAgKhB,4BC3KGgB,EAA+B,SAAC,GAQtC,IAPLlC,EAOI,EAPJA,aACAmC,EAMI,EANJA,SACAC,EAKI,EALJA,eACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,mBACA/B,EAEI,EAFJA,oBACAgC,EACI,EADJA,oBAEA,OACE,qBAAKpD,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,2BACOa,QADP,IACOA,OADP,EACOA,EAAcV,GADrB,oBAC4BU,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAcE,SAG1C,mBAAG,UAAQ,WAAX,gBAAuBF,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAcwC,UAGvC,sBAAKrD,UAAU,QAAf,WACIgD,IAAaC,GAAkB,cAAC,EAAD,IAEhCA,GACC,qBAAKjD,UAAU,yBAAyB,UAAQ,gBAAhD,kCAKoB,KAAb,OAARgD,QAAQ,IAARA,OAAA,EAAAA,EAAUV,SACT,mBAAGtC,UAAU,aAAa,UAAQ,oBAAlC,6BAKDgD,IAAoB,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUV,QAAS,GAC9B,qCACE,mBAAGtC,UAAU,aAAb,uBACCgD,EAAS3C,KAAI,SAACiD,GAAD,OACZ,0BAEEtD,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGO,KAAI,iBAAY+C,EAAQ9B,OAAS,UAAQ,gBAA5C,SACG8B,EAAQ7C,OAGX,wBACE,UAAQ,gBACRR,KAAK,SACLD,UAAU,kBACV,aAAW,SACXE,QAAS,kBAAMkD,EAAoBE,EAAQnD,KAL7C,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACGsD,EAAQD,SArBNC,EAAQnD,WA4BnB+C,GACA,wBACE,UAAQ,qBACRjD,KAAK,SACLD,UAAU,iBACVE,QAAS,kBAAMiD,GAAmB,IAJpC,gCAWHD,GACC,cAAC,EAAD,CACE/B,eAAgBN,EAAaV,GAC7BiB,oBAAqBA,UCvG3BmC,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAACC,GAClBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQZ,KAAOa,KAAKC,UAAUH,GAC9BC,EAAQG,QAAU,CAChB,eAAgB,oCAKbZ,EAAK,KACTa,MAAK,kBAAMC,MAAMf,EAAWO,EAAKG,MACjCI,MAAK,SAACE,GAAD,OAAcA,EAASC,UAG1B,IAAMC,EACN,SAAIX,GAAJ,OAAoBD,EAAWC,IADzBW,EAEL,SAAIX,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDS,EAIH,SAACX,GAAD,OAAiBD,EAAQC,EAAK,WCrB3BY,EAAa,SACxBC,EACAlE,EACAe,EACA6B,GAEA,OAAOoB,EAAqB,YAAa,CACvCE,SACAlE,OACAe,QACA6B,UCLSuB,G,kBAAgB,WAC3B,MAA0B/E,mBAAiB,IAA3C,mBAAOF,EAAP,KAAckF,EAAd,KACA,EAAkChF,mBAAiB,IAAnD,mBAAOc,EAAP,KAAkBmE,EAAlB,KACA,EAAwCjF,mBAAsB,MAA9D,mBAAOkF,EAAP,KAAqBC,EAArB,KACA,EAAwCnF,mBAAsB,MAA9D,mBAAOgB,EAAP,KAAqBoE,EAArB,KACA,EAAgCpF,mBAAoB,IAApD,mBAAOmD,EAAP,KAAiBkC,EAAjB,KAEA,EAAkCrF,oBAAS,GAA3C,mBAAOmC,EAAP,KAAkBC,EAAlB,KACA,EAA8BpC,oBAAS,GAAvC,mBAAOsF,EAAP,KAAgBC,EAAhB,KACA,EAA4CvF,oBAAS,GAArD,mBAAOoD,EAAP,KAAuBoC,EAAvB,KACA,EAA8CxF,oBAAS,GAAvD,mBAAOqD,EAAP,KAAwBC,EAAxB,KAEAmC,qBAAU,WD5BHb,EAAmB,UC6BbJ,KAAKQ,KACf,IAEH,IAAMU,EAAyB,SAACC,GAC9BvD,GAAa,GD9BW,SAACuD,GAC3B,OAAOf,EAAA,wBAAoCe,IC+BzCC,CAAaD,GACVnB,MAAK,SAACL,GACLc,EAAad,GACboB,GAAW,MAEZM,OAAM,kBAAMN,GAAW,MACvBO,SAAQ,kBAAM1D,GAAa,OAG1B2D,EAAwB,SAACjB,IDrCN,SAACA,GAC1B,OAAOF,EAAA,2BAA0CE,KCqC/CkB,CAAYlB,GACTN,MAAK,SAACL,GACLkB,EAAYlB,GACZqB,GAAkB,MAEnBK,OAAM,kBAAML,GAAkB,MAC9BM,SAAQ,kBAAM1D,GAAa,OA0B1Bb,EAAmB,uCAAG,WAC1BuD,EACAlE,EACAe,EACA6B,GAJ0B,iBAAAlB,EAAA,sEAMDuC,EAAWC,EAAQlE,EAAMe,EAAO6B,GAN/B,OAMpByC,EANoB,OAQpBC,EACF/C,EAASgD,QAAO,SAAA1C,GAAO,OAAgB,OAAZzC,QAAY,IAAZA,OAAA,EAAAA,EAAcV,MAAOmD,EAAQqB,UAE5DO,EAAY,GAAD,mBAAKa,GAAL,CAAuBD,KAXR,2CAAH,4DAsBzB,OACE,sBAAM9F,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEL,MAAOA,EACPC,iBAtDS,SACvBY,EACAF,GAEAE,EAAM4B,iBAENmD,EAAuBjF,EAAKH,IAC5B6E,EAAgB1E,QAmDN,sBAAKN,UAAU,QAAQ,UAAQ,cAA/B,WACI+E,GACA,mBAAG,UAAQ,iBAAX,8BAGD/C,GAAa,cAAC,EAAD,IAEbmD,IAAYnD,GACX,qBACEhC,UAAU,yBACV,UAAQ,oBAFV,oCAQAW,EAAU2B,QACPyC,IACC/C,IACAmD,GAEF,qBACEnF,UAAU,0BACV,UAAQ,aAFV,0BAQHW,EAAU2B,OAAS,GAClB,cAAC,EAAD,CACE3B,UAAWA,EACXC,iBAhFO,SAACE,GACxBmE,GAAgB,SAACgB,GACf,OAAe,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAa9F,MAAOW,EAAKX,GACpB,KAGFW,KAGT8E,EAAsB9E,EAAKX,IAC3BgD,GAAmB,IAuEHtC,aAAcA,YAOxB,qBACE,UAAQ,UACRb,UAAWgB,IAAG,OAAQ,YAAa,eAAgB,UAAW,CAC5D,gBAAiBH,IAHrB,SAME,qBAAKb,UAAU,gCAAf,SACGa,GACC,cAAC,EAAD,CACEA,aAAcA,EACdmC,SAAUA,EACVC,eAAgBA,EAChBC,gBAAiBA,EACjBC,mBAAoBA,EACpB/B,oBAAqBA,EACrBgC,oBA5EY,SAAC8C,GAC3B,IAAMH,EACF/C,EAASgD,QAAO,SAAA1C,GAAO,OAAIA,EAAQnD,KAAO+F,KAE9ChB,EAAYa,GDtEa,SAACG,GACrBzB,EAAA,oBAA2ByB,ICsEhCC,CAAcD,mBClGlBE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1e102da4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  handleUserSelect: (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, handleUserSelect }) => {\n  const [isDropDownOpened, setIsDropDownOpened] = useState(false);\n\n  return (\n    <div data-cy=\"UserSelector\" className=\"dropdown is-active\">\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropDownOpened(!isDropDownOpened)}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isDropDownOpened && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map((user) => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                onClick={(event) => {\n                  handleUserSelect(event, user);\n                  setIsDropDownOpened(false);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  handleSelectPost: (post: Post) => void;\n  selectedPost: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  handleSelectPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {userPosts.map((post) => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">{post.title}</td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={cn('button', 'is-link', {\n                  'is-light': selectedPost?.id !== post.id,\n                })}\n                onClick={() => handleSelectPost(post)}\n              >\n                {selectedPost?.id === post.id ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\ntype Props = {\n  selectedPostId: number;\n  handleAddNewComment: (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  handleAddNewComment,\n}) => {\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [commentText, setCommentText] = useState('');\n  const [isCommentTextError, setIsCommentTextError] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClear = () => {\n    setName('');\n    setIsNameError(false);\n    setEmail('');\n    setIsEmailError(false);\n    setCommentText('');\n    setIsCommentTextError(false);\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim().length) {\n      setIsNameError(true);\n    } else {\n      setIsNameError(false);\n    }\n\n    if (!email.trim().length) {\n      setIsEmailError(true);\n    } else {\n      setIsEmailError(false);\n    }\n\n    if (!commentText.length) {\n      setIsCommentTextError(true);\n    } else {\n      setIsCommentTextError(false);\n    }\n\n    if (name.trim().length\n      && email.trim().length\n      && commentText.trim().length\n    ) {\n      try {\n        setIsLoading(true);\n\n        await handleAddNewComment(selectedPostId, name, email, commentText);\n        setCommentText('');\n      } catch {\n        throw new Error();\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': isNameError,\n            })}\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': isCommentTextError,\n            })}\n            value={commentText}\n            onChange={(e) => setCommentText(e.target.value)}\n          />\n        </div>\n\n        {isCommentTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button', 'is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post;\n  comments: Comment[] | null;\n  isCommentError: boolean;\n  canWriteComment: boolean;\n  setCanWriteComment: React.Dispatch<React.SetStateAction<boolean>>;\n  handleAddNewComment: (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => void;\n  handleDeleteComment: (commentId: number) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isCommentError,\n  canWriteComment,\n  setCanWriteComment,\n  handleAddNewComment,\n  handleDeleteComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">{selectedPost?.body}</p>\n        </div>\n\n        <div className=\"block\">\n          {!comments && !isCommentError && <Loader />}\n\n          {isCommentError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments?.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments && comments?.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map((comment) => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!canWriteComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setCanWriteComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {canWriteComment && (\n          <NewCommentForm\n            selectedPostId={selectedPost.id}\n            handleAddNewComment={handleAddNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable  @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n// a promise resolved after a given delay\n\nfunction wait(delay: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then((response) => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\n\nimport { UserSelector } from './components/UserSelector';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport {\n  addComment,\n  deleteComment,\n  getComments,\n  getUserPosts,\n  getUsers,\n} from './api/api';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nimport './App.scss';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isCommentError, setIsCommentError] = useState(false);\n  const [canWriteComment, setCanWriteComment] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const getUserPostsFromServer = (userId: number) => {\n    setIsLoading(true);\n\n    getUserPosts(userId)\n      .then((data) => {\n        setUserPosts(data);\n        setIsError(false);\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  const getCommentsFromServer = (postId: number) => {\n    getComments(postId)\n      .then((data) => {\n        setComments(data);\n        setIsCommentError(false);\n      })\n      .catch(() => setIsCommentError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleUserSelect = (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => {\n    event.preventDefault();\n\n    getUserPostsFromServer(user.id);\n    setSelectedUser(user);\n  };\n\n  const handleSelectPost = (post: Post) => {\n    setSelectedPost((currentPost) => {\n      if (currentPost?.id === post.id) {\n        return null;\n      }\n\n      return post;\n    });\n\n    getCommentsFromServer(post.id);\n    setCanWriteComment(false);\n  };\n\n  const handleAddNewComment = async (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => {\n    const newComment = await addComment(postId, name, email, body);\n\n    const filteredComments\n      = comments.filter(comment => selectedPost?.id === comment.postId);\n\n    setComments([...filteredComments, newComment]);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    const filteredComments\n      = comments.filter(comment => comment.id !== commentId);\n\n    setComments(filteredComments);\n    deleteComment(commentId);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  handleUserSelect={handleUserSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isError && !isLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!userPosts.length\n                  && selectedUser\n                  && !isLoading\n                  && !isError\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {userPosts.length > 0 && (\n                  <PostsList\n                    userPosts={userPosts}\n                    handleSelectPost={handleSelectPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn('tile', 'is-parent', 'is-8-desktop', 'Sidebar', {\n              'Sidebar--open': selectedPost,\n            })}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isCommentError={isCommentError}\n                  canWriteComment={canWriteComment}\n                  setCanWriteComment={setCanWriteComment}\n                  handleAddNewComment={handleAddNewComment}\n                  handleDeleteComment={handleDeleteComment}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}